class Solution {
    public int findCircleNum(int[][] isConnected) {
       int vertex = isConnected.length;
        //create adj list
        ArrayList<ArrayList<Integer>> adjlist = new ArrayList<>();
        for(int i=0;i<vertex;i++){
            adjlist.add(new ArrayList<>()); 
        }
        for(int i=0;i<vertex;i++){
            for(int j=0;j<vertex;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjlist.get(i).add(j);
                    adjlist.get(j).add(i);
                }
            }
        }
        //create a visited array
        boolean visited[] = new boolean[vertex];
        int ans = 0;

        //If any node is unvisited after dfs, mean we need to call dfs again so increase our answer by 1
        for(int i=0;i<isConnected.length;i++){
            if(!visited[i]){
                ans++;
                dfs(adjlist,visited,i);
            }
        }
        return ans;
    }
    //dfs function
    public void dfs(ArrayList<ArrayList<Integer>> adjlist,boolean[] visited, int index){
        visited[index] = true;
        for(int i : adjlist.get(index)){
            if(!visited[i]){
                dfs(adjlist,visited,i);
            }
        }
    }
}
