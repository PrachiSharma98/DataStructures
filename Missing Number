class Solution {
    public int missingNumber(int[] nums) {
             Map<Integer, Integer> frequencyMap = new HashMap<>();

        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        int maxNum = -1;
        for (int num : nums) {
            maxNum = Math.max(maxNum, num);
        }

        int missingNum = -1;
        for (int i = 0; i <= maxNum + 1; i++) {
            if (!frequencyMap.containsKey(i)) {
                missingNum = i;
                break;
            }
        }
        return missingNum;
        
    }
}

O(2N)


Hashing  - O(2N) Space - O(N)

public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
        int n =a.length;
        // Write your code here
        int[] hash = new int[n+1];
        for(int i=0;i<n;i++)
        {
           hash[a[i]]++;
        }
        int r=-1;int m=-1;
        for(int i=0;i<=n;i++)
        {
            if(hash[i] == 2){
                r = i;
            }
            if(hash[i] == 0)
            {
                m = i;
            }
           
           
        
        }
 int[] ans = {r,m};
 return ans;
    }
}
