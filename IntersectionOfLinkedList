/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
          Set<ListNode> hs=new HashSet<>();
        while(headA!=null ){
            hs.add(headA);
                headA=headA.next;
            }
         while(headB!=null){
             if(hs.contains(headB))
             return headB;
             headB=headB.next;
         }   

        return null;
    }
}
















OR 





 public ListNode getIntersectionNode(ListNode head1, ListNode head2) {
        while (head2 != null){
            ListNode temp = head1;
            while (temp != null){
                if (temp == head2) return head2;
                temp = temp.next;
            }
            head2 = head2.next;
        }
        return null;
    }
}


The outer while loop runs as long as headB is not null. In the worst case, this loop will run for the entire length of headB, which is O(length of headB).

Inside the outer loop, there is another nested while loop that runs as long as temp is not null. In the worst case, this loop will run for the entire length of headA, which is O(length of headA).

Inside the innermost loop, there is a comparison temp == headB. This comparison takes constant time, O(1).

Combining these, the overall time complexity of the code is O(length of headB * length of headA). This is not efficient, especially if the linked lists are long.

A more efficient approach to finding the intersection of two linked lists is to use a hash set to store the nodes of the first list and then iterate through the second list to check if any node is in the hash set. This approach would have a time complexity of O(length of headA + length of headB) and would be more efficient.






